// <auto-generated />
using System;
using AttendanceCheck.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AttendanceCheck.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221211172002_addMo")]
    partial class addMo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttendanceCheck.Models.AdminModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("AttendanceCheck.Models.ClassModel", b =>
                {
                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int>("End")
                        .HasColumnType("int");

                    b.Property<int>("Start")
                        .HasColumnType("int");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("AttendanceCheck.Models.CourseClassModel", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseClassModel");
                });

            modelBuilder.Entity("AttendanceCheck.Models.CourseModel", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AttendanceCheck.Models.CourseRoomModel", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasIndex("CourseId");

                    b.HasIndex("RoomId");

                    b.ToTable("CourseRoom");
                });

            modelBuilder.Entity("AttendanceCheck.Models.RoomModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("AttendanceCheck.Models.StudentCourseModel", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("AttendanceCheck.Models.StudentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AttendanceCheck.Models.TeacherCourseModel", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");
                });

            modelBuilder.Entity("AttendanceCheck.Models.TeacherModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("AttendanceCheck.Models.CourseClassModel", b =>
                {
                    b.HasOne("AttendanceCheck.Models.CourseModel", "CourseModel")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.Navigation("CourseModel");
                });

            modelBuilder.Entity("AttendanceCheck.Models.CourseRoomModel", b =>
                {
                    b.HasOne("AttendanceCheck.Models.CourseModel", "CourseModel")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("AttendanceCheck.Models.RoomModel", "RoomModel")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("CourseModel");

                    b.Navigation("RoomModel");
                });

            modelBuilder.Entity("AttendanceCheck.Models.StudentCourseModel", b =>
                {
                    b.HasOne("AttendanceCheck.Models.CourseModel", "CourseModel")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("AttendanceCheck.Models.StudentModel", "StudentModel")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("CourseModel");

                    b.Navigation("StudentModel");
                });

            modelBuilder.Entity("AttendanceCheck.Models.TeacherCourseModel", b =>
                {
                    b.HasOne("AttendanceCheck.Models.CourseModel", "CourseModel")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("AttendanceCheck.Models.TeacherModel", "TeacherModel")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("CourseModel");

                    b.Navigation("TeacherModel");
                });
#pragma warning restore 612, 618
        }
    }
}
